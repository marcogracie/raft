#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os, random, uuid
from json import JSONEncoder

BROADCAST = "FFFF"


def generate_MID():
    return uuid.uuid4().hex


class OutboundMessage:

    def __init__(self, source, destination, leader, _type, mid, key=None,
                 value=None, term=None, vote=None, lastLogInd=None, lastLogTerm=None
                 , entries=None, commitIndex=None, reps=None):
        self.source = source
        self.destination = destination
        self.leader = leader
        self.type = _type
        self.mid = mid
        self.key = key
        self.value = value
        self.term = term
        self.vote = vote
        self.lastLogInd = lastLogInd
        self.lastLogTerm = lastLogTerm
        self.entries = entries
        self.commitIndex = commitIndex
        self.reps = reps

    def __dict__(self):
        return {
            'src': self.source,
            'dst': self.destination,
            'leader': self.leader,
            'type': self.type,
            'MID': self.mid,
            'key': self.key,
            'value': self.value,
            'term': self.term,
            'vote': self.vote,
            'lastLogInd': self.lastLogInd,
            'lastLogTerm': self.lastLogTerm,
            'entries': self.entries,
            'commitIndex': self.commitIndex,
            'reps': self.reps
        }

    def filtered_dict(self):
        dictionary = self.__dict__()
        return {key: value for key, value in dictionary.items() if value is not None}


# Class for messages received and thus decoded,
# converts entries in dict to fields in class.
class InboundMessage:
    def __init__(self, dictionary):
        for key, value in dictionary.items():
            setattr(self, key, value)


# State superclass that applies to
# all replicas, no matter the type they happen
# to be in this term.
class State:

    def set_replica(self, replica):
        self.replica = replica

    def on_message(self, message):
        # When a message is received, this method
        # is called as a dispatcher for the respective message type
        message = InboundMessage(json.loads(message))

        type = message.type

        if type == 'get' or type == 'put':
            return self.on_external_command(message)
        else:
            # print("Received message '%s'" % (message.__dict__,), flush=True)
            if message.term > self.replica.currentTerm:
                # The term is further along, update accordingly
                self.replica.currentTerm = message.term

            if type == 'AppendEntries':
                # print("got heartbeat/ append")
                return self.on_append(message)
            elif type == 'election':
                # print("got election message", message.__dict__)
                return self.on_vote(message)
            elif type == 'vote':
                return self.on_vote_response(message)
            elif type == 'response':
                return self.on_response(message)

    def on_external_command(self, message):
        """Called when a command from a client has been received"""

    def on_append(self, message):
        """Called when a leader wants to append an entry to the log"""

    def on_vote(self, message):
        """called when election start is received. """

    def on_vote_response(self, message):
        """called when a vote is received for replica"""

    def on_response(self, message):
        """called when a response is sent back to leader"""

    def new_timeout(self):
        # Updates timeout
        self.currentTime = time.time()
        return self.currentTime + random.randrange(5, 10)

    def send_response_message(self, message):
        # print("sending response" + str(message))
        self.replica.send(message)
        return self, None


# Voter superclass for followers and candidates
class Voter(State):
    def __init__(self):
        self.prevVote = None


# helper function for slicing the log if conflicts found
def slice_dict(log, prevLogInd):
    sortedKeys = sorted(log.keys())
    slicedKeys = sortedKeys[:prevLogInd]

    newLog = {key: log[key] for key in slicedKeys}
    return newLog


# helper function for slicing the log for leader to send
def slice_dict_other(log, prevLogInd):
    sortedKeys = sorted(log.keys())
    slicedKeys = sortedKeys[prevLogInd:]

    newLog = {key: log[key] for key in slicedKeys}
    return newLog


# Follower class, all replicas are instantiated as such.
class Follower(State):

    def __init__(self):
        self.prevVote = None
        self.timeoutTime = self.new_timeout()

    def on_external_command(self, message):
        message = OutboundMessage(self.replica.id, message.src, self.replica.leader, 'redirect', message.MID, )
        self.send_response_message(message.filtered_dict())

    def on_vote(self, message):

        if self.prevVote is None and message.lastLogInd >= self.replica.lastLogInd:
            self.prevVote = message.src
            self.send_vote_response(message)
        else:
            self.send_vote_response(message, yay=False)

    def send_vote_response(self, message, yay=True):
        # print("sending  vote")
        response = OutboundMessage(self.replica.id, message.src, message.src, 'vote'
                                   , message.MID, vote=yay, term=self.replica.currentTerm)
        if yay:
            self.replica.leader = message.src
        self.send_response_message(response.filtered_dict())

    def on_vote_response(self, message):
        # Another replica beat us to the win,
        # do nothing
        pass

    def on_append(self, message):
        self.timeoutTime = self.new_timeout()
        self.replica.leader = message.src
        self.replica.total_reps = message.reps

        # If leader is behind, reply false
        # 1 in recv impl condensed summary (5.1)
        if message.term < self.replica.currentTerm:
            response = OutboundMessage(self.replica.id, message.src, self.replica.leader, 'response',
                                       message.MID, vote=False, term=self.replica.currentTerm)
            self.send_response_message(response.filtered_dict())
        # if not heartbeat
        elif hasattr(message, 'entries'):
            # print("legit append")
            # Check if leader is further along
            # 5 in recv impl condensed summary
            if message.commitIndex > self.replica.commitIndex:
                # if further, update commit index locally
                self.replica.commitIndex = min(message.commitIndex, self.replica.lastLogInd)

            # ensure term of prevlogindex locally is in sync with leader
            # 2 in recv impl condensed summary
            if message.lastLogInd in self.replica.log and int(self.replica.log[message.lastLogInd]['term']) != int(
                    message.lastLogTerm):
                # whoops, there's a conflict
                # we have to send a false back
                # first delete existing entry and all following it 3 in recv impl condensed summary (5.3)
                self.replica.log = slice_dict(self.replica.log, message.lastLogInd)
                response = OutboundMessage(self.replica.id, message.src, self.replica.leader, 'response',
                                           message.MID, vote=False, term=self.replica.currentTerm)
                self.send_response_message(response.filtered_dict())
                self.replica.lastLogInd = message.lastLogInd
                self.replica.lastLogTerm = message.lastLogTerm
            else:
                #no conflicts found
                #check if data at term is same as in message
                if message.commitIndex in self.replica.log and self.replica.log[message.commitIndex]['term'] != message.term:
                    # data is diff, slice current log then set last val to commit val
                    self.replica.log = slice_dict(self.replica.log, self.replica.commitIndex)
                    for k, v in message.entries.items():
                        self.replica.log[int(k)] = v
                        self.replica.commitIndex += 1
                    # let leader know it's in our log
                    response = OutboundMessage(self.replica.id, message.src, self.replica.leader, 'response',
                                               message.MID, vote=True, term=self.replica.currentTerm)
                    self.send_response_message(response.filtered_dict())
                    self.replica.lastLogInd = len(self.replica.log) - 1
                    self.replica.commitIndex = len(self.replica.log) - 1
                    self.replica.lastLogTerm = self.replica.currentTerm
                else:
                    # no conflicts, just put into log
                    for k, v in message.entries.items():
                        self.replica.log[int(k)] = v
                        if v['type'] == 'put':
                            # if put, update statemachine
                            print("adding" + v['key'] + v['value'], flush=True)
                            self.replica.stateMachine[v['key']] = v['value']
                        self.replica.commitIndex += 1
                    # let leader know it's in our log
                    response = OutboundMessage(self.replica.id, message.src, self.replica.leader, 'response',
                                               message.MID, vote=True, term=self.replica.currentTerm)
                    self.send_response_message(response.filtered_dict())
                    self.replica.lastLogInd = len(self.replica.log) - 1
                    self.replica.commitIndex = len(self.replica.log) - 1
                    self.replica.lastLogTerm = self.replica.currentTerm

        else:
            #ACK heartbeat:
            response = OutboundMessage(self.replica.id, message.src, self.replica.leader, 'response',
                                       message.MID, term=self.replica.currentTerm)
            self.send_response_message(response.filtered_dict())


# Leader class, replica becomes this when more than half the other
# replicas vote for them
class Leader(State):

    def __init__(self):
        self.nextIndexes = {}
        self.matchIndex = {}
        self.commits = {}
        self.committed = []
        self.message_to_confirm = {}
        # to reduce num of heartbeats, set short timer
        self.timeout = 1
        # keep track of reps we are waiting to hear from every 10 seconds
        # so when one crashes we notice
        self.res_timeout = 10

    def set_replica(self, replica):
        self.replica = replica
        self.waiting_to_hear = []
        self.send_heartbeat()
        self.timer = time.time() + self.timeout
        self.res_timer = time.time() + self.res_timeout
        self.replica.logInd = self.replica.commitIndex

        for rep in self.replica.others:
            self.nextIndexes[rep] = self.replica.lastLogInd + 1
            self.matchIndex[rep] = 0

    def on_response(self, message):
        if message.src not in self.waiting_to_hear:
            self.waiting_to_hear.append(message.src)
        if hasattr(message, 'vote'):
            #print("checking response")
            if message.MID not in self.commits:
                self.commits[message.MID] = []  # init commit list for this MID
            if not message.vote:
                # print("failed")
                # fail, roll log back for this follower
                self.nextIndexes[message.src] -= 1
                log_to_send = slice_dict_other(self.replica.log, self.nextIndexes[message.src])
                index_to_send = max(0, self.nextIndexes[message.src] - 1)

                # retry append
                message_retry = OutboundMessage(self.replica.id, message.src, self.replica.leader, 'AppendEntries',
                                                message.MID
                                                , term=self.replica.currentTerm, lastLogInd=index_to_send,
                                                lastLogTerm=self.replica.lastLogTerm,
                                                entries=log_to_send, commitIndex=self.matchIndex[message.src],
                                                reps=len(self.waiting_to_hear))
                self.send_response_message(message_retry.filtered_dict())
            else:
                # the append went through, add a commit count and increase their index
                self.nextIndexes[message.src] += 1
                self.matchIndex[message.src] += 1
                if message.src not in self.commits[message.MID]:
                    self.commits[message.MID].append(message.src)
            if message.MID in self.commits and message.MID not in self.committed and len(self.commits[message.MID]) > (
                    self.replica.total_reps - 1) / 2:
                # majority have committed, add to state machine and tell client
                message_to_confirm = self.message_to_confirm[message.MID]
                if message_to_confirm.type == 'get':
                    if message_to_confirm.key in self.replica.stateMachine:
                        val = self.replica.stateMachine[message_to_confirm.key]
                        confirm_message = OutboundMessage(self.replica.id, message_to_confirm.src, self.replica.leader,
                                                          'ok',
                                                          message_to_confirm.MID,
                                                          value=val)
                    else:
                        confirm_message = OutboundMessage(self.replica.id, message_to_confirm.src, self.replica.leader,
                                                          'ok',
                                                          message_to_confirm.MID,
                                                          value="")
                else:
                    self.replica.stateMachine[message_to_confirm.key] = message_to_confirm.value
                    confirm_message = OutboundMessage(self.replica.id, message_to_confirm.src, self.replica.leader,
                                                      'ok',
                                                      message_to_confirm.MID)
                self.send_response_message(confirm_message.filtered_dict())
                # remove so we don't send duplicates
                # increment last log ind and set term
                self.replica.commitIndex += 1
                self.commits.pop(message.MID)
                self.committed.append(message.MID)

    # We already won, we shouldn't listen to another
    # replica asking for an election
    def on_vote(self, message):
        pass

    # Already won, extra votes negligible
    def on_vote_response(self, message):
        pass

    def on_append(self, message):
        # if we get an append from a leader ahead of us,
        # defer to them.
        if message.term > self.replica.currentTerm:
            follower = Follower()
            self.replica.state = follower
            follower.set_replica(self.replica)
            self.replica.leader = message.src

    def on_external_command(self, message):
        self.replica.log[self.replica.logInd] = {'term': self.replica.currentTerm, 'type': message.type,
                                                 'key': message.key,
                                                 'value': message.value} if message.type == 'put' else {
            'term': self.replica.currentTerm, 'type': message.type,
            'key': message.key}
        self.replica.logInd += 1
        self.send_append(message.MID)
        # store the message we will confirm send once we reach consensus
        self.message_to_confirm[message.MID] = message

        return self, None

    def send_heartbeat(self):
        self.timer = time.time() + self.timeout

        message = OutboundMessage(self.replica.id, BROADCAST, self.replica.id, 'AppendEntries', generate_MID()
                                  , term=self.replica.currentTerm, lastLogInd=self.replica.lastLogInd,
                                  reps=len(self.waiting_to_hear))
        self.send_response_message(message.filtered_dict())

    def send_append(self, mid):
        self.timer = time.time() + self.timeout
        log_to_send = slice_dict_other(self.replica.log, self.replica.lastLogInd - 1)

        message = OutboundMessage(self.replica.id, BROADCAST, self.replica.id, 'AppendEntries', mid
                                  , term=self.replica.currentTerm, lastLogInd=self.replica.lastLogInd,
                                  lastLogTerm=self.replica.lastLogTerm,
                                  entries=log_to_send, commitIndex=self.replica.commitIndex,
                                  reps=len(self.waiting_to_hear))
        print("sending message", message.filtered_dict(), flush=True)
        self.send_response_message(message.filtered_dict())
        self.replica.lastLogInd = self.replica.logInd - 1 if self.replica.logInd > 0 else 0
        self.replica.lastLogTerm = self.replica.currentTerm

    def check_uncommitted_entries(self):
        for entry in self.commits:
            for other in self.replica.others:
                if other not in self.commits[entry]:
                    log_to_send = slice_dict_other(self.replica.log, self.nextIndexes[other])
                    index_to_send = max(0, self.nextIndexes[other] - 1)

                    # retry append
                    message_retry = OutboundMessage(self.replica.id, other, self.replica.leader, 'AppendEntries',
                                                    entry
                                                    , term=self.replica.currentTerm, lastLogInd=index_to_send,
                                                    lastLogTerm=self.replica.lastLogTerm,
                                                    entries=log_to_send, commitIndex=self.matchIndex[other],
                                                    reps=len(self.waiting_to_hear))
                    self.send_response_message(message_retry.filtered_dict())



# Candidate class, replicas go in this state if they timeout
class Candidate(Voter):
    def set_replica(self, replica):
        self.replica = replica
        self.votes = {}
        self.initiate_election()

    def on_vote(self, message):
        pass

    def on_vote_response(self, message):
        if message.src not in self.votes:
            self.votes[message.src] = message
            if len(self.votes) > (self.replica.total_reps - 1) / 2:
                leader = Leader()
                self.replica.state = leader
                leader.set_replica(self.replica)
                self.replica.leader = self.replica.id

    def initiate_election(self):
        self.replica.currentTerm += 1

        message = OutboundMessage(self.replica.id, BROADCAST, self.replica.id, 'election', generate_MID(),
                                  term=self.replica.currentTerm, lastLogInd=self.replica.lastLogInd)
        self.send_response_message(message.filtered_dict())
        self.prevVote = self.replica.id

    def on_external_command(self, message):
        message = OutboundMessage(self.replica.id, message.src, self.replica.leader, 'redirect', message.MID, )
        self.send_response_message(message.filtered_dict())

    def on_append(self, message):
        # if we get an append defer to this leader
        follower = Follower()
        self.replica.state = follower
        follower.set_replica(self.replica)
        self.replica.leader = message.src
        self.replica.state.timeoutTime = self.new_timeout()


class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others
        self.state = Follower()
        self.currentTerm = 0
        self.lastLogInd = 0
        self.lastLogTerm = None
        # total  reps
        self.total_reps = 5
        self.leader = BROADCAST
        self.stateMachine = {}
        self.log = {}
        self.logInd = 0
        self.commitIndex = 0

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        self.state.set_replica(self)

        print("Replica %s starting up" % self.id, flush=True)
        hello = {"src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello"}
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    def run(self):
        while True:
            if isinstance(self.state, Leader) and self.state.timer < time.time():
                self.state.send_heartbeat()
            if isinstance(self.state, Leader) and self.state.res_timer < time.time():
                self.state.check_uncommitted_entries()
                self.total_reps = len(self.state.waiting_to_hear)
                self.state.waiting_to_hear.clear()
                self.state.res_timer = time.time() + self.state.res_timeout
            data, addr = self.socket.recvfrom(65535)
            msg = data.decode('utf-8')

            #print("Received message '%s'" % (msg,), flush=True)
            self.state.on_message(msg)
            if (isinstance(self.state, Follower)
                    and self.state.timeoutTime < time.time()):
                self.state = Candidate()
                self.state.set_replica(self)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
